#!/usr/bin/env python3
"""
Automated Report Generator - Sample Project 4

Comprehensive report generation system using all Agentium features
with Gemini AI for enhanced content creation and analysis.
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, List
import json
from datetime import datetime

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    from agentium import (
        Agentium, 
        GeminiIntegration, 
        GeminiConfig, 
        GeminiModel,
        LoggerUtils
    )
except ImportError:
    print("Agentium not found. Install with: pip install agentium")
    sys.exit(1)


class AutomatedReportGenerator:
    """Advanced report generation with AI enhancement"""
    
    def __init__(self, gemini_model: str = "gemini-pro"):
        self.agentium = Agentium()
        gemini_config = GeminiConfig(model=GeminiModel(gemini_model), temperature=0.4)
        self.gemini = GeminiIntegration(gemini_config)
        self.logger = LoggerUtils.get_logger(__name__)
        self.memory = self.agentium.memory_helper.create_context("report_generator")
        
        print(f"Automated Report Generator initialized")
        print(f"Gemini integration: {'Available' if self.gemini.is_available() else 'Not available'}")
    
    def generate_comprehensive_report(self, raw_data: str, report_type: str = "business") -> Dict[str, Any]:
        """Generate comprehensive report from raw data"""
        print(f"\nGenerating {report_type} report...")
        
        # Step 1: Extract structured data
        print("  Extracting data...")
        extracted = self.agentium.extractor.extract(raw_data, extraction_type='numbers')
        
        # Step 2: Condense content
        print("  Processing content...")
        if self.gemini.is_available():
            condensed = self.gemini.enhance_condenser(raw_data, target_length=1000)
            condensed_text = condensed.get('text', raw_data)
        else:
            condensed = self.agentium.condenser.condense(raw_data, compression_ratio=0.6)
            condensed_text = condensed.get('text', raw_data)
        
        # Step 3: Optimize content
        print("  Optimizing structure...")
        if self.gemini.is_available():
            optimized = self.gemini.enhance_optimizer(condensed_text, optimization_type='professional')
            optimized_text = optimized.get('text', condensed_text)
        else:
            optimized = self.agentium.optimizer.optimize(condensed_text)
            optimized_text = optimized.get('text', condensed_text)
        
        # Step 4: Generate insights
        print("  Generating insights...")
        if self.gemini.is_available():
            insights_result = self.gemini.enhance_insights(optimized_text, focus_area=report_type)
            insights = insights_result.get('insights', [])
        else:
            insights_result = self.agentium.insight_generator.generate_insights(optimized_text)
            insights = insights_result.get('insights', [])
        
        # Step 5: Create executive summary
        print("  Creating summary...")
        if self.gemini.is_available():
            summary_result = self.gemini.enhance_summarizer(optimized_text, summary_type='executive')
            summary = summary_result.get('summary', optimized_text[:300])
        else:
            summary_result = self.agentium.summarizer.summarize(optimized_text, strategy='abstractive')
            summary = summary_result.get('summary', optimized_text[:300])
        
        # Step 6: Generate final report using templates
        print("  Rendering report...")
        template_data = {
            'title': f"{report_type.title()} Analysis Report",
            'generated_at': datetime.now().isoformat(),
            'executive_summary': summary,
            'key_insights': insights,
            'extracted_data': extracted.get('extracted_data', []),
            'methodology': 'AI-enhanced analysis using Agentium library',
            'ai_model': self.gemini.config.model.value if self.gemini.is_available() else 'local'
        }
        
        template_content = '''
# {{ title }}

**Generated:** {{ generated_at }}  
**AI Model:** {{ ai_model }}

## Executive Summary
{{ executive_summary }}

## Key Insights
{% for insight in key_insights %}
{{ loop.index }}. {{ insight }}
{% endfor %}

## Data Analysis
{% if extracted_data %}
**Key Metrics Identified:**
{% for data_point in extracted_data[:10] %}
- {{ data_point }}
{% endfor %}
{% endif %}

## Methodology
{{ methodology }}

---
*Report generated by Agentium Automated Report Generator*
        '''
        
        report_result = self.agentium.template_manager.process_template(
            template_content, template_data, template_type='markdown'
        )
        
        final_report = {
            'report_content': report_result.get('rendered_content', 'Report generation failed'),
            'metadata': template_data,
            'processing_steps': ['extraction', 'condensation', 'optimization', 'insights', 'summarization', 'templating'],
            'success': True
        }
        
        # Store in memory
        self.memory.store(f"report_{datetime.now().strftime('%H%M%S')}", final_report)
        
        return final_report
    
    def save_report(self, report: Dict[str, Any], filename: str = None):
        """Save report to file"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"automated_report_{timestamp}.md"
        
        output_dir = Path(__file__).parent / "output"
        output_dir.mkdir(exist_ok=True)
        
        output_file = output_dir / filename
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(report['report_content'])
        
        print(f" Report saved to: {output_file}")
        return output_file


def main():
    """Main demonstration"""
    print("Agentium Automated Report Generator Demo")
    print("=" * 50)
    
    # Sample data for report generation
    sample_data = """
    Q3 2024 Business Performance Analysis
    
    Our company has shown remarkable growth this quarter with revenue reaching $2.3 million, 
    representing a 15% increase from Q2. Customer satisfaction scores improved to 4.2/5.0, 
    while our market share expanded by 8%. Key achievements include launching 3 new products, 
    expanding to 2 new markets, and reducing operational costs by 12%.
    
    Challenges faced include supply chain disruptions affecting 25% of orders, 
    increased competition reducing margins by 3%, and staff turnover rate of 18%. 
    However, our digital transformation initiatives have improved efficiency by 22%, 
    and customer retention rate reached 89%.
    
    Looking forward, we project 20% revenue growth for Q4 with the holiday season approaching. 
    Key focus areas include improving supply chain resilience, enhancing product quality, 
    and expanding our digital presence. Investment in AI and automation technologies 
    is expected to yield 15% cost savings next year.
    
    Contact: business-analysis@company.com, Phone: +1-555-REPORT (555-737-6781)
    Dashboard: https://analytics.company.com/q3-2024
    """
    
    generator = AutomatedReportGenerator()
    
    # Generate comprehensive report
    report = generator.generate_comprehensive_report(sample_data, "business")
    
    # Save report
    report_file = generator.save_report(report)
    
    # Send completion notification
    generator.agentium.communicator.send_notification(
        message=f"Automated report generated successfully! Saved to {report_file.name}",
        channel='console',
        title='Report Generation Complete'
    )
    
    print("\nReport generation demo completed!")


if __name__ == "__main__":
    # Check for API key and provide setup instructions
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("WARNING: No Gemini API key found!")
        print("To enable AI enhancement, please set your API key:")
        print("\nWindows Command Prompt:")
        print("  set GEMINI_API_KEY=your_api_key_here")
        print("\nWindows PowerShell:")
        print("  $env:GEMINI_API_KEY=\"your_api_key_here\"")
        print("\nLinux/Mac:")
        print("  export GEMINI_API_KEY=your_api_key_here")
        print("\nGet your API key at: https://makersuite.google.com/app/apikey")
        print("\nContinuing with standard processing...\n")
    
    main()